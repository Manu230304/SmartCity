# Generated by Django 5.2.1 on 2025-06-13 09:49

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Cittadino',
            fields=[
                ('nome', models.CharField(max_length=70)),
                ('cognome', models.CharField(max_length=70)),
                ('email', models.EmailField(max_length=150, primary_key=True, serialize=False)),
                ('password', models.CharField(max_length=50)),
                ('occupazione', models.CharField(choices=[('studente', 'Studente'), ('impiegato', 'Impiegato'), ('libero_professionista', 'Libero Professionista'), ('disoccupato', 'Disoccupato'), ('pensionato', 'Pensionato'), ('casalinga', 'Casalinga/o'), ('altro', 'Altro')], default=('studente', 'Studente'), max_length=70)),
                ('data_nascita', models.DateField()),
                ('data_registrazione', models.DateTimeField(auto_now_add=True)),
                ('notifiche_email', models.BooleanField(default=False, null=True)),
                ('punteggio_attivita', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Municipalita',
            fields=[
                ('nome', models.CharField(max_length=50)),
                ('codice_postale', models.CharField(max_length=5, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='TecnicoComunale',
            fields=[
                ('cittadino', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='tecnicocomunale', serialize=False, to='SmartCity.cittadino')),
                ('specializzazione', models.CharField(choices=[('manutenzione', 'Manutenzione Infrastrutturale'), ('energia', 'Gestione Energetica'), ('ambiente', 'Gestione Rifiuti e Ambiente'), ('qualita', 'Controllo Qualità di Aria e Acqua'), ('smart_city', 'Sistemi Smart City'), ('edilizia_pubblica', 'Tecnico per l’Edilizia Pubblica'), ('informatica', 'Tecnologie Informatiche'), ('videosorveglianza', 'Sicurezza e Videosorveglianza'), ('mobilita', 'Mobilità e Trasporti'), ('emergenze', 'Tecnico per l’Emergenza e Protezione Civile')], max_length=155)),
                ('numero_matricola', models.CharField(max_length=16)),
                ('email_ufficio', models.EmailField(max_length=254)),
                ('telefono_ufficio', models.CharField(max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Urbanista',
            fields=[
                ('cittadino', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='profilo_urbanista', serialize=False, to='SmartCity.cittadino')),
                ('tipo', models.CharField(choices=[('junior', 'Junior'), ('senior', 'Senior'), ('esperto', 'Esperto')], max_length=100)),
                ('qualifica', models.CharField(choices=[('laurea_triennale_urbanistica', 'Laurea triennale in Urbanistica'), ('laurea_magistrale_pianificazione', 'Laurea magistrale in Pianificazione Territoriale'), ('master_urbanistica', 'Master in Urbanistica e Pianificazione Urbana'), ('dottorato_scienze_urbanistiche', 'Dottorato in Scienze Urbanistiche'), ('abilitazione_professionale', 'Abilitazione professionale all’esercizio della professione di Urbanista'), ('certificazione_gis', 'Certificazione in GIS (Geographic Information Systems)'), ('corso_rigenerazione', 'Corso di specializzazione in Rigenerazione Urbana'), ('esperto_sostenibilita', 'Esperto in Sostenibilità e Pianificazione Ambientale'), ('esperto_mobilita', 'Esperto in Mobilità Urbana e Trasporti'), ('certificazione_pmp', 'Certificazione in Project Management (es. PMP)'), ('esperto_politiche_abitative', 'Esperto in Politiche Abitative e Sociali'), ('esperto_normativa', 'Esperto in Normativa Urbanistica e Edilizia')], max_length=120)),
                ('bio', models.TextField()),
                ('valutazione_media', models.FloatField(default=0)),
            ],
        ),
        migrations.AddField(
            model_name='cittadino',
            name='codice_postale',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SmartCity.municipalita'),
        ),
        migrations.CreateModel(
            name='Progetto',
            fields=[
                ('ID_Progetto', models.AutoField(primary_key=True, serialize=False)),
                ('nome', models.CharField(max_length=255)),
                ('descrizione', models.TextField()),
                ('budget', models.FloatField()),
                ('stato', models.CharField(choices=[('in_valutazione', 'In valutazione'), ('in_votazione', 'In votazione'), ('approvato', 'Approvato'), ('in_corso', 'In corso'), ('sospeso', 'Sospeso'), ('concluso', 'Concluso'), ('annullato', 'Annullato')], default='in_valutazione', max_length=20)),
                ('approvato', models.BooleanField(default=False)),
                ('data_pubblicazione', models.DateField(auto_now_add=True)),
                ('data_inizio', models.DateField(null=True)),
                ('data_fine', models.DateField(null=True)),
                ('codice_postale', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progetti', to='SmartCity.municipalita')),
                ('urbanista', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progetti', to='SmartCity.urbanista')),
            ],
        ),
        migrations.CreateModel(
            name='FaseProgetto',
            fields=[
                ('ID_FaseProgetto', models.AutoField(primary_key=True, serialize=False)),
                ('Titolo_FaseProgetto', models.CharField(max_length=40)),
                ('descrizione_fase', models.TextField()),
                ('data_inizioFase_stimata', models.DateField()),
                ('data_fineFase_stimata', models.DateField()),
                ('data_Inizio', models.DateField(null=True)),
                ('data_Fine', models.DateField(null=True)),
                ('completata', models.BooleanField()),
                ('note_tecniche', models.TextField(null=True)),
                ('progetto', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fasi', to='SmartCity.progetto')),
            ],
        ),
        migrations.CreateModel(
            name='Recensione',
            fields=[
                ('ID_Recensione', models.AutoField(primary_key=True, serialize=False)),
                ('voto', models.IntegerField()),
                ('descrizione', models.TextField(null=True)),
                ('cittadino', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recensioni', to='SmartCity.cittadino')),
                ('progetto', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recensioni', to='SmartCity.progetto')),
            ],
        ),
        migrations.CreateModel(
            name='Votazione',
            fields=[
                ('ID_Votazione', models.AutoField(primary_key=True, serialize=False)),
                ('data_voto', models.DateField()),
                ('scelta', models.BooleanField()),
                ('cittadino', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votazioni', to='SmartCity.cittadino')),
                ('progetto', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votazioni', to='SmartCity.progetto')),
            ],
        ),
        migrations.CreateModel(
            name='Gestisce',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gestioni', to='SmartCity.faseprogetto')),
                ('tecnico', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gestioni', to='SmartCity.tecnicocomunale')),
            ],
            options={
                'unique_together': {('fase', 'tecnico')},
            },
        ),
    ]
